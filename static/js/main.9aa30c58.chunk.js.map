{"version":3,"sources":["problems sync nonrecursive /.json$","util.js","App.js","problems.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","squaredDistance","p","q","Math","pow","compareEdges","eOriginal","eCurrent","epsilon","ratio","isPointInBounds","point","bounds","d3","getPositiveVectorBetweenPoints","p1","p2","abs","isPerfectSquare","num","sqrt","getPossibleCombinationsForSquaredDistanceWithEpsilon","squaredDistanceOriginal","result","epsilonFactor","ZLower","ZUpper","firstX","floor","firstY","x","firstYFound","y","xSquaredPlusYSquared","push","App","props","downloadTxtFile","element","document","createElement","file","Blob","JSON","stringify","getPose","type","href","URL","createObjectURL","download","state","problemKey","body","appendChild","click","changeCurrentProblem","setState","currentProblem","parse","target","value","setTimeout","init","changeImportSolution","console","log","importSolutionJSON","vertices","currentState","figure","update","handleSelectProblem","problems","hasOwnProperty","exportSolution","integerPose","currentSolutionJSON","myRef","React","createRef","myRef2","myRef3","requireContext","require","json","forEach","key","obj","simpleKey","split","pop","shift","loadProblems","bonusLevelsByType","findBonusLevelsByType","bonusTypeToColor","this","data","nodes","links","outbound","inbound","entries","problem","problemId","parseInt","node","targets","bonuses","length","bonus","findComponents","currentGroup","nodeOuter","group","nodesToVisit","counter","nodeToVisit","targetId","targetNode","find","typeToLevelsSource","typeToLevelsTarget","newVar","subject","round","scale","invert","mode","circles","current","selectAll","select","circle","d3Circle","attr","isInBrushExtent","selection","d","brushExtent","initManual","initForce","initProblemBonusGraph","problemBonusGraph","findProblemBonusGraph","create","simulation","force","width","height","svg","join","append","style","link","call","on","event","active","alphaTarget","restart","fx","fy","drag","text","source","size","edges","edge","strength","index","iterations","domain","range","handleDrag","brush","handleBrush","tooltip","resolution","lineClosed","curve","hole","edgeComparison","transition","duration","vertexStart","vertexEnd","vertexOriginalStart","vertexOriginalEnd","possibleCombinationsForSquaredDistanceWithEpsilon","html","ySquared","getPossibleCombinationsForSquaredDistance","v","vertex","i","is","findEdgesConnectedToVertex","color","possibleCombinationsForSquaredDistanceWithEpsilonPerEdge","combination","intersection","filter","some","c","backgroundColor","margin","onChange","padding","placeholder","ref","onClick","readOnly","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2IAAA,IAAIA,EAAM,CACT,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,IACtB,qBAAsB,I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","file":"static/js/main.9aa30c58.chunk.js","sourcesContent":["var map = {\n\t\"./001.problem.json\": 204,\n\t\"./002.problem.json\": 205,\n\t\"./003.problem.json\": 206,\n\t\"./004.problem.json\": 207,\n\t\"./005.problem.json\": 208,\n\t\"./006.problem.json\": 209,\n\t\"./007.problem.json\": 210,\n\t\"./008.problem.json\": 211,\n\t\"./009.problem.json\": 212,\n\t\"./010.problem.json\": 213,\n\t\"./011.problem.json\": 214,\n\t\"./012.problem.json\": 215,\n\t\"./013.problem.json\": 216,\n\t\"./014.problem.json\": 217,\n\t\"./015.problem.json\": 218,\n\t\"./016.problem.json\": 219,\n\t\"./017.problem.json\": 220,\n\t\"./018.problem.json\": 221,\n\t\"./019.problem.json\": 222,\n\t\"./020.problem.json\": 223,\n\t\"./021.problem.json\": 224,\n\t\"./022.problem.json\": 225,\n\t\"./023.problem.json\": 226,\n\t\"./024.problem.json\": 227,\n\t\"./025.problem.json\": 228,\n\t\"./026.problem.json\": 229,\n\t\"./027.problem.json\": 230,\n\t\"./028.problem.json\": 231,\n\t\"./029.problem.json\": 232,\n\t\"./030.problem.json\": 233,\n\t\"./031.problem.json\": 234,\n\t\"./032.problem.json\": 235,\n\t\"./033.problem.json\": 236,\n\t\"./034.problem.json\": 237,\n\t\"./035.problem.json\": 238,\n\t\"./036.problem.json\": 239,\n\t\"./037.problem.json\": 240,\n\t\"./038.problem.json\": 241,\n\t\"./039.problem.json\": 242,\n\t\"./040.problem.json\": 243,\n\t\"./041.problem.json\": 244,\n\t\"./042.problem.json\": 245,\n\t\"./043.problem.json\": 246,\n\t\"./044.problem.json\": 247,\n\t\"./045.problem.json\": 248,\n\t\"./046.problem.json\": 249,\n\t\"./047.problem.json\": 250,\n\t\"./048.problem.json\": 251,\n\t\"./049.problem.json\": 252,\n\t\"./050.problem.json\": 253,\n\t\"./051.problem.json\": 254,\n\t\"./052.problem.json\": 255,\n\t\"./053.problem.json\": 256,\n\t\"./054.problem.json\": 257,\n\t\"./055.problem.json\": 258,\n\t\"./056.problem.json\": 259,\n\t\"./057.problem.json\": 260,\n\t\"./058.problem.json\": 261,\n\t\"./059.problem.json\": 262,\n\t\"./060.problem.json\": 263,\n\t\"./061.problem.json\": 264,\n\t\"./062.problem.json\": 265,\n\t\"./063.problem.json\": 266,\n\t\"./064.problem.json\": 267,\n\t\"./065.problem.json\": 268,\n\t\"./066.problem.json\": 269,\n\t\"./067.problem.json\": 270,\n\t\"./068.problem.json\": 271,\n\t\"./069.problem.json\": 272,\n\t\"./070.problem.json\": 273,\n\t\"./071.problem.json\": 274,\n\t\"./072.problem.json\": 275,\n\t\"./073.problem.json\": 276,\n\t\"./074.problem.json\": 277,\n\t\"./075.problem.json\": 278,\n\t\"./076.problem.json\": 279,\n\t\"./077.problem.json\": 280,\n\t\"./078.problem.json\": 281,\n\t\"./079.problem.json\": 282,\n\t\"./080.problem.json\": 283,\n\t\"./081.problem.json\": 284,\n\t\"./082.problem.json\": 285,\n\t\"./083.problem.json\": 286,\n\t\"./084.problem.json\": 287,\n\t\"./085.problem.json\": 288,\n\t\"./086.problem.json\": 289,\n\t\"./087.problem.json\": 290,\n\t\"./088.problem.json\": 291,\n\t\"./089.problem.json\": 292,\n\t\"./090.problem.json\": 293,\n\t\"./091.problem.json\": 294,\n\t\"./092.problem.json\": 295,\n\t\"./093.problem.json\": 296,\n\t\"./094.problem.json\": 297,\n\t\"./095.problem.json\": 298,\n\t\"./096.problem.json\": 299,\n\t\"./097.problem.json\": 300,\n\t\"./098.problem.json\": 301,\n\t\"./099.problem.json\": 302,\n\t\"./100.problem.json\": 303,\n\t\"./101.problem.json\": 304,\n\t\"./102.problem.json\": 305,\n\t\"./103.problem.json\": 306,\n\t\"./104.problem.json\": 307,\n\t\"./105.problem.json\": 308,\n\t\"./106.problem.json\": 309,\n\t\"./107.problem.json\": 310,\n\t\"./108.problem.json\": 311,\n\t\"./109.problem.json\": 312,\n\t\"./110.problem.json\": 313,\n\t\"./111.problem.json\": 314,\n\t\"./112.problem.json\": 315,\n\t\"./113.problem.json\": 316,\n\t\"./114.problem.json\": 317,\n\t\"./115.problem.json\": 318,\n\t\"./116.problem.json\": 319,\n\t\"./117.problem.json\": 320,\n\t\"./118.problem.json\": 321,\n\t\"./119.problem.json\": 322,\n\t\"./120.problem.json\": 323,\n\t\"./121.problem.json\": 324,\n\t\"./122.problem.json\": 325,\n\t\"./123.problem.json\": 326,\n\t\"./124.problem.json\": 327,\n\t\"./125.problem.json\": 328,\n\t\"./126.problem.json\": 329,\n\t\"./127.problem.json\": 330,\n\t\"./128.problem.json\": 331,\n\t\"./129.problem.json\": 332,\n\t\"./130.problem.json\": 333,\n\t\"./131.problem.json\": 334,\n\t\"./132.problem.json\": 335\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 203;","import * as d3 from 'd3';\r\n\r\nfunction squaredDistance(p, q) {\r\n    //console.log(p, q);\r\n    return Math.pow(p[0] - q[0], 2) + Math.pow(p[1] - q[1], 2);\r\n}\r\n\r\nfunction isEdgeValidLength(eOriginal, eCurrent, epsilon) {\r\n    let squaredDistance1 = squaredDistance(eCurrent[0], eCurrent[1]);\r\n    let squaredDistance2 = squaredDistance(eOriginal[0], eOriginal[1]);\r\n    let difference = Math.abs((squaredDistance1 / squaredDistance2) - 1);\r\n    return difference <= epsilon / 1000000;\r\n}\r\n\r\nfunction compareEdges(eOriginal, eCurrent, epsilon) {\r\n    let squaredDistance1 = squaredDistance(eCurrent[0], eCurrent[1]);\r\n    let squaredDistance2 = squaredDistance(eOriginal[0], eOriginal[1]);\r\n    let ratio = squaredDistance1 / squaredDistance2;\r\n    if (ratio <= 1.0 && (1-ratio) > epsilon / 1000000) {\r\n        //too short\r\n        return -1;\r\n    }\r\n    if (ratio >= 1.0 && ratio-1 > epsilon / 1000000) {\r\n        //too long\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction isPointInBounds(point, bounds) {\r\n    //handles border differently :(\r\n    //https://github.com/d3/d3-polygon/blob/main/src/contains.js\r\n    return d3.polygonContains(bounds, point);\r\n    /*\r\n    let n = bounds.length,\r\n        p = bounds[n - 1],\r\n        x = point[0], y = point[1],\r\n        x0 = p[0], y0 = p[1],\r\n        x1, y1,\r\n        inside = false;\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        p = bounds[i]; x1 = p[0]; y1 = p[1];\r\n        if (((y1 >= y) !== (y0 >= y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\r\n        x0 = x1; y0 = y1;\r\n    }\r\n\r\n    return inside;\r\n    */\r\n}\r\n\r\nfunction getPositiveVectorBetweenPoints(p1, p2) {\r\n    return [Math.abs(p1[0] - p2[0]), Math.abs(p1[1] - p2[1])];\r\n}\r\n\r\nfunction getSlopeTriangle(p1, p2) {\r\n    let [x, y] = getPositiveVectorBetweenPoints(p1, p2);\r\n    const gcd = gcd_two_numbers(x, y);\r\n    return [x/gcd, y/gcd];\r\n}\r\n\r\nfunction lcm_two_numbers(x, y) {\r\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\r\n        return false;\r\n    return (!x || !y) ? 0 : Math.abs((x * y) / gcd_two_numbers(x, y));\r\n}\r\n\r\nfunction gcd_two_numbers(x, y) {\r\n    x = Math.abs(x);\r\n    y = Math.abs(y);\r\n    while(y) {\r\n        var t = y;\r\n        y = x % y;\r\n        x = t;\r\n    }\r\n    return x;\r\n}\r\nfunction isPerfectSquare(num) {\r\n    return Math.sqrt(num) % 1 === 0;\r\n    /*\r\n    // Optimize solution: Binary Search\r\n    var isPerfectSquare = function(num) {\r\n\r\n        if(num ==1)return true\r\n        let left = 2;\r\n        let right = Math.floor(num/2);\r\n        while(left <= right){\r\n            let middle = Math.floor((left + right)/2)\r\n            let sqr = middle * middle;\r\n            if(sqr == num){\r\n                return true\r\n            }else{\r\n                if(sqr > num){\r\n                    right = middle -1\r\n                }else{\r\n                    left = middle + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return false\r\n    };\r\n    */\r\n}\r\n\r\nfunction getPossibleCombinationsForSquaredDistance(squaredDistanceOriginal) {\r\n    const result = [];\r\n    for(let x = 1; x < squaredDistanceOriginal; ++x) {\r\n        let ySquared = squaredDistanceOriginal - x*x;\r\n        if (isPerfectSquare(ySquared)) {\r\n            result.push([x, Math.sqrt(ySquared)]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction pythagoreanTriplet(n){\r\n    const result = [];\r\n    for(let a = 1; a < n - 1; a++){\r\n        for(let b = a; b < n; b++){\r\n            let c = Math.sqrt(a * a + b * b);\r\n            if(c % 1 === 0){\r\n                result.push([a, b, c]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n\r\nfunction getPossibleCombinationsForSquaredDistanceWithEpsilon(squaredDistanceOriginal, epsilon) {\r\n    const result = [];\r\n    const epsilonFactor = epsilon/1000000;\r\n    //x²+y²=Z mit Z in [ZL, ZU]\r\n    //d.h. x,y in [0, floor(sqrt(ZU))]\r\n    //z.b. x²+y²=Z mit Z in [39, 65] in case squaredDistanceOriginal = 52 and epsilonFactor = 0.25\r\n    //x,y in [0, 8], x²+y² in [39, 65]\r\n    const ZLower = (1-epsilonFactor) * squaredDistanceOriginal;\r\n    const ZUpper = (1+epsilonFactor) * squaredDistanceOriginal;\r\n\r\n    const firstX = Math.floor(Math.sqrt(ZUpper));\r\n    let firstY = Math.floor(Math.sqrt(ZUpper));\r\n    for(let x = 0; x <= firstX; ++x) {\r\n        let firstYFound = false;\r\n        //only let y run till x, not 0, because we do not want to compute the whole quadrant, but the octant\r\n        for(let y = firstY; y >= 0; --y) {\r\n            const xSquaredPlusYSquared = x*x + y*y;\r\n            if (ZLower <= xSquaredPlusYSquared && xSquaredPlusYSquared <= ZUpper) {\r\n                if (!firstYFound) {\r\n                    firstY = y;\r\n                    firstYFound = true;\r\n                }\r\n                //mirror to all octants, counts some border vertices double\r\n                result.push([x, y]);\r\n                result.push([-x, y]);\r\n                result.push([x, -y]);\r\n                result.push([-x, -y]);\r\n            } else {\r\n                if (firstYFound) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getPossibleCombinationsForSquaredDistanceWithEpsilonSlow(squaredDistanceOriginal, epsilon) {\r\n    const result = [];\r\n    const epsilonFactor = epsilon/1000000;\r\n    //x²+y²=Z mit Z in [ZL, ZU]\r\n    //d.h. x,y in [0, floor(sqrt(ZU))]\r\n    //z.b. x²+y²=Z mit Z in [39, 65] in case squaredDistanceOriginal = 52 and epsilonFactor = 0.25\r\n    //x,y in [0, 8], x²+y² in [39, 65]\r\n    const ZLower = (1-epsilonFactor) * squaredDistanceOriginal;\r\n    const ZUpper = (1+epsilonFactor) * squaredDistanceOriginal;\r\n\r\n    //find all x,y\r\n    const last = Math.floor(Math.sqrt(ZUpper));\r\n    for(let x = 0; x <= last; ++x) {\r\n        // noinspection JSSuspiciousNameCombination\r\n        for(let y = x; y <= last; ++y) {\r\n            const xSquaredPlusYSquared = x*x + y*y;\r\n            if (xSquaredPlusYSquared >= ZLower && xSquaredPlusYSquared <= ZUpper) {\r\n                /*\r\n                result.push([x, y]);\r\n                result.push([-x, y]);\r\n                result.push([x, -y]);\r\n                result.push([-x, -y]);\r\n                result.push([y, x]);\r\n                result.push([-y, x]);\r\n                result.push([y, -x]);\r\n                result.push([-y, -x]);\r\n\r\n                 */\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfunction getPossibleCombinationsForSquaredDistanceWithEpsilonOld(squaredDistanceOriginal, epsilon) {\r\n    //fucking slow probably\r\n    const result = [];\r\n    const epsilonFactor = epsilon/1000000;\r\n    //new points must have a squaredDistance of (1-epsilonFactor) * squaredDistanceOriginal <= squaredDistance <= (1+epsilonFactor) * squaredDistanceOriginal\r\n    for(let x = 1; x <= Math.floor(Math.sqrt(squaredDistanceOriginal)); ++x) {\r\n        for(let ySquared = Math.floor((squaredDistanceOriginal - x*x) * (1-epsilonFactor)); ySquared <= Math.ceil((squaredDistanceOriginal - x*x) / (1-epsilonFactor)); ++ySquared) {\r\n            if (isPerfectSquare(ySquared)) {\r\n                result.push([x, Math.sqrt(ySquared)]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction findEdgesConnectedToVertex(vertex, vertices, edges) {\r\n    const result = [];\r\n    for(let i = 0; i < vertices.length; ++i) {\r\n        if (Object.is(vertex, vertices[i])) {\r\n            if (result.length > 0) {\r\n                throw \"This should never happen...\";\r\n            }\r\n            for(let e = 0; e < edges.length; ++e) {\r\n                if(edges[e][0] === i || edges[e][1] === i) {\r\n                    result.push(edges[e]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction yieldPointsInPolygon(closedHole, maxX, maxY) {\r\n    console.log(closedHole);\r\n    //closedHole.push(closedHole[0]);\r\n    //https://alienryderflex.com/polygon_fill/\r\n    for (let y = 0; y < maxY; ++y)  {\r\n        console.log(\"y: \" + y);\r\n        const nodes = [];\r\n        for (let h = 0; h < closedHole.length-1; ++h) {\r\n            console.log(\"h: \" + h);\r\n            let closedHoleElement = closedHole[h];\r\n            let closedHoleElementNext = closedHole[h+1];\r\n            //console.log(closedHoleElement);\r\n            //console.log(closedHoleElementNext);\r\n            if ((closedHoleElement[1] < y && closedHoleElementNext[1] >= y)) {\r\n                const XOffset = y/(closedHoleElementNext[1]-closedHoleElement[1]) * (closedHoleElementNext[0]-closedHoleElement[0]);\r\n                //console.log(\"XOffset \" + XOffset);\r\n                let XValue = null;\r\n                XValue = XOffset + closedHoleElement[0];\r\n                nodes.push(XValue);\r\n                //console.log(\"pushing \" + XValue);\r\n            } else if ((closedHoleElementNext[1] <= y && closedHoleElement[1] > y)) {\r\n                const XOffset = y/(closedHoleElementNext[1]-closedHoleElement[1]) * (closedHoleElementNext[0]-closedHoleElement[0]);\r\n                //console.log(\"XOffset \" + XOffset);\r\n                let XValue = null;\r\n                XValue = XOffset + closedHoleElementNext[0];\r\n                nodes.push(XValue);\r\n                //console.log(\"pushing \" + XValue);\r\n            }\r\n        }\r\n        console.log(nodes);\r\n    }\r\n}\r\n\r\nexport {\r\n    squaredDistance,\r\n    isEdgeValidLength,\r\n    isPointInBounds,\r\n    compareEdges,\r\n    getPositiveVectorBetweenPoints,\r\n    getPossibleCombinationsForSquaredDistance,\r\n    getPossibleCombinationsForSquaredDistanceWithEpsilon,\r\n    yieldPointsInPolygon,\r\n    findEdgesConnectedToVertex,\r\n};","import * as d3 from 'd3';\nimport React from 'react';\nimport {loadProblems} from './problems';\nimport {\n    compareEdges, findEdgesConnectedToVertex,\n    getPositiveVectorBetweenPoints,\n    getPossibleCombinationsForSquaredDistance,\n    getPossibleCombinationsForSquaredDistanceWithEpsilon,\n    isPointInBounds,\n    squaredDistance,\n} from './util';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.myRef2 = React.createRef();\n        this.myRef3 = React.createRef();\n        this.problems = loadProblems();\n        this.state = {\n            currentSolutionJSON: \"\",\n            importSolutionJSON: \"\",\n            problemKey: '015',\n            currentProblem: {\n                \"bonuses\": [{\"bonus\": \"GLOBALIST\", \"position\": [195, 171], \"problem\": 13}],\n                \"hole\": [[15, 0], [35, 20], [20, 44], [0, 24]],\n                \"epsilon\": 1250,\n                \"figure\": {\n                    \"edges\": [[0, 1], [0, 2], [1, 3], [2, 3], [2, 4], [3, 4]],\n                    \"vertices\": [[0, 20], [20, 0], [20, 40], [40, 20], [49, 45]],\n                },\n            },\n            bonusLevelsByType: this.findBonusLevelsByType(),\n        };\n        this.bonusTypeToColor = {\n            \"BREAK_A_LEG\": 'blue',\n            \"SUPERFLEX\": 'cyan',\n            \"GLOBALIST\": 'yellow',\n            \"WALLHACK\": 'orange',\n        };\n    }\n\n    componentDidMount() {\n        this.init();\n    }\n\n    findProblemBonusGraph() {\n        const data = {\n            nodes: [\n            ],\n            links: [\n            ],\n        };\n\n        let outbound = {\n\n        };\n        let inbound = {\n\n        };\n\n        for(const [problemKey, problem] of Object.entries(this.problems)) {\n            const problemId = parseInt(problemKey);\n\n            const node = {id: problemId, targets: []};\n            data.nodes.push(node);\n\n            if (problem.hasOwnProperty('bonuses')) {\n                outbound[problemId] = problem.bonuses.length;\n                for (const bonus of problem.bonuses) {\n                    node.targets.push(bonus.problem);\n                    data.links.push({\"source\": problemId, \"target\": bonus.problem, \"value\": 1, \"type\": bonus.bonus});\n                    if (typeof inbound[bonus.problem] === 'undefined') {\n                        inbound[bonus.problem] = 0;\n                    }\n                    inbound[bonus.problem]++;\n                }\n            }\n        }\n\n        console.log(outbound);\n        console.log(inbound);\n        this.findComponents(data);\n        return data;\n    }\n\n    findComponents(data) {\n        let currentGroup = 0;\n\n        for (const nodeOuter of data.nodes) {\n            if (typeof nodeOuter.group !== 'undefined') {\n                continue;\n            }\n            const nodesToVisit = [nodeOuter];\n\n            let counter = 0;\n            while (nodesToVisit.length > 0 && (counter++) < 1000000) {\n                const nodeToVisit = nodesToVisit.shift();\n                if (typeof nodeToVisit.group === 'undefined') {\n                    nodeToVisit.group = currentGroup;\n                    for (const targetId of nodeToVisit.targets) {\n                        const targetNode = data.nodes.find(node => node.id === targetId);\n                        nodesToVisit.push(targetNode);\n                    }\n                }\n            }\n            currentGroup++;\n        }\n        console.log(currentGroup);\n        console.log(currentGroup);\n        console.log(data);\n    }\n\n    findBonusLevelsByType() {\n        const typeToLevelsSource = {};\n        const typeToLevelsTarget = {};\n        for(const [problemKey, problem] of Object.entries(this.problems)) {\n            const problemId = parseInt(problemKey);\n\n            if (problem.hasOwnProperty('bonuses')) {\n                for (const bonus of problem.bonuses) {\n                    if (typeof typeToLevelsSource[bonus.bonus] === 'undefined') {\n                        typeToLevelsSource[bonus.bonus] = [];\n                    }\n                    typeToLevelsSource[bonus.bonus].push(problemId);\n                    if (typeof typeToLevelsTarget[bonus.bonus] === 'undefined') {\n                        typeToLevelsTarget[bonus.bonus] = [];\n                    }\n                    typeToLevelsTarget[bonus.bonus].push(bonus.problem);\n                }\n            }\n        }\n        const newVar = {\n            typeToLevelsSource: typeToLevelsSource,\n            typeToLevelsTarget: typeToLevelsTarget,\n        };\n        console.log(newVar);\n        console.log(newVar);\n        console.log(newVar);\n        console.log(newVar);\n        return newVar;\n    }\n\n    handleDrag(e) {\n        e.subject[0] = Math.round(this.scale.invert(e.x));\n        e.subject[1] = Math.round(this.scale.invert(e.y));\n        this.update();\n    }\n\n    handleBrush(e) {\n        if (e.mode === 'drag') {\n            let svg = d3.select(this.myRef.current).selectAll('svg');\n            const circles = svg.select('g.figure g.vertices').selectAll('circle');\n//console.log(circles);\n            for (const circle of circles) {\n                let d3Circle = d3.select(circle);\n                d3Circle.attr('cx', d3Circle.attr('cx') + 1000);\n                if (this.isInBrushExtent(d3Circle, e.selection)) {\n                    //currentProblemNew.figure.vertices[i][0] = Math.round(currentProblemNew.figure.vertices[i][0] + e.sourceEvent.movementX);\n                    //currentProblemNew.figure.vertices[i][0] = Math.round(currentProblemNew.figure.vertices[i][0] + e.sourceEvent.movementY);\n                    d3Circle.attr('cx', d3Circle.attr('cx') + 1000);\n                    d3Circle.attr('cy', d3Circle.attr('cy') + 1000);\n                }\n            }\n            this.update()\n        }\n    }\n\n    isInBrushExtent(d, brushExtent) {\n        return brushExtent &&\n            d.attr('cx') >= brushExtent[0][0] &&\n            d.attr('cx') <= brushExtent[1][0] &&\n            d.attr('cy') >= brushExtent[0][1] &&\n            d.attr('cy') <= brushExtent[1][1];\n    }\n\n    init() {\n        this.currentState = JSON.parse(JSON.stringify(this.state.currentProblem));\n        this.initManual();\n        this.initForce();\n        this.initProblemBonusGraph();\n    }\n\n    initProblemBonusGraph() {\n        this.problemBonusGraph = this.findProblemBonusGraph();\n\n        const links = this.problemBonusGraph.links.map(d => Object.create(d));\n        const nodes = this.problemBonusGraph.nodes.map(d => Object.create(d));\n\n        const width = 500;\n        const height = 500;\n        //console.log(this.problemBonusGraph.nodes);\n        //console.log(this.problemBonusGraph.nodes.map(node => node.group));\n        //const color = d3.scaleOrdinal().domain(this.problemBonusGraph.nodes.map(node => node.group)).range(d3.schemeSet1);\n        const color = 'black';\n\n        const simulation = d3.forceSimulation(nodes)\n            .force(\"link\", d3.forceLink(links).id(d => d.id))\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n        let svg = d3.select(this.myRef3.current)\n            .selectAll('svg')\n            .data([1])\n            .join('svg')\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        svg.append('defs')\n            .append('marker')\n            .attr('id','arrowhead')\n            .attr('viewBox','-0 -5 10 10')\n            .attr('refX',13)\n            .attr('refY',0)\n            .attr('orient','auto')\n            .attr('markerWidth',13)\n            .attr('markerHeight',13)\n            .attr('xoverflow','visible')\n            .append('svg:path')\n            .attr('d', 'M 0,-3 L 10,0 L 0,3')\n            .attr('fill', '#DDD')\n            .style('stroke','none')\n            .style(\"opacity\", 0.5);\n\n        const link = svg.append(\"g\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-opacity\", 0.6)\n            .selectAll(\"line\")\n            .data(links)\n            .join(\"line\")\n            .attr(\"stroke\", d => this.bonusTypeToColor[d.type])\n            .attr(\"stroke-width\", d => Math.sqrt(d.value))\n            .attr(\"class\", \"link\")\n            .attr('marker-end','url(#arrowhead)');\n\n\n        const drag = simulation => {\n\n            function dragstarted(event) {\n                if (!event.active) simulation.alphaTarget(0.3).restart();\n                event.subject.fx = event.subject.x;\n                event.subject.fy = event.subject.y;\n            }\n\n            function dragged(event) {\n                event.subject.fx = event.x;\n                event.subject.fy = event.y;\n            }\n\n            function dragended(event) {\n                if (!event.active) simulation.alphaTarget(0);\n                event.subject.fx = null;\n                event.subject.fy = null;\n            }\n\n            return d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended);\n        };\n\n        const node = svg.append(\"g\")\n            .attr(\"stroke\", \"#fff\")\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"circle\")\n            .data(nodes)\n            .join(\"circle\")\n            .attr(\"r\", 3)\n            .attr(\"fill\", color)\n            .call(drag(simulation));\n\n        node.append(\"title\")\n            .text(d => d.id);\n\n        simulation.on(\"tick\", () => {\n            link\n                .attr(\"x1\", d => d.source.x)\n                .attr(\"y1\", d => d.source.y)\n                .attr(\"x2\", d => d.target.x)\n                .attr(\"y2\", d => d.target.y);\n\n            node\n                .attr(\"cx\", d => d.x)\n                .attr(\"cy\", d => d.y);\n        });\n    }\n\n    initForce() {\n        const size = 1500;\n/*\n        const data = {\n            nodes: [\n                {\"id\": \"Alice\"},\n                {\"id\": \"Bob\"},\n                {\"id\": \"Carol\"},\n            ],\n\n            links: [\n                {\"source\": 0, \"target\": 1}, // Alice → Bob\n                {\"source\": 1, \"target\": 2}, // Bob → Carol\n            ],\n        };\n*/\n        const data = {\n            nodes: this.currentState.figure.vertices,\n            links: this.currentState.figure.edges.map(edge => {return {\"source\": edge[0], \"target\": edge[1]}}),\n        };\n        const links = data.links.map(d => Object.create(d));\n        const nodes = data.nodes.map(d => Object.create(d));\n        const simulation = d3.forceSimulation(nodes)\n            .force(\"link\", d3.forceLink(links).strength(link => {\n                return 500*squaredDistance(this.state.currentProblem.figure.vertices[link.source.index], this.state.currentProblem.figure.vertices[link.target.index]);\n            }).iterations(10).strength(1))\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"center\", d3.forceCenter(size / 2, size / 2).strength(0));\n\n        let svg = d3.select(this.myRef2.current)\n            .selectAll('svg')\n            .data([1])\n            .join('svg')\n            .attr('width', size)\n            .attr('height', size)\n            .attr('display', 'block')\n            .attr('margin', 'auto');\n\n        const link = svg.append(\"g\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-opacity\", 0.6)\n            .selectAll(\"line\")\n            .data(links)\n            .join(\"line\")\n            .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n        const drag = simulation => {\n\n            function dragstarted(event) {\n                if (!event.active) simulation.alphaTarget(0.3).restart();\n                event.subject.fx = event.subject.x;\n                event.subject.fy = event.subject.y;\n            }\n\n            function dragged(event) {\n                event.subject.fx = event.x;\n                event.subject.fy = event.y;\n            }\n\n            function dragended(event) {\n                if (!event.active) simulation.alphaTarget(0);\n                event.subject.fx = null;\n                event.subject.fy = null;\n            }\n\n            return d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended);\n        };\n\n        const node = svg.append(\"g\")\n            .attr(\"stroke\", \"#fff\")\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"circle\")\n            .data(nodes)\n            .join(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"fill\", \"red\")\n            .call(drag(simulation));\n\n        node.append(\"title\")\n            .text(d => d.id);\n\n        simulation.on(\"tick\", () => {\n            link\n                .attr(\"x1\", d => d.source.x)\n                .attr(\"y1\", d => d.source.y)\n                .attr(\"x2\", d => d.target.x)\n                .attr(\"y2\", d => d.target.y);\n\n            node\n                .attr(\"cx\", d => d.x)\n                .attr(\"cy\", d => d.y);\n        });\n\n        //invalidation.then(() => simulation.stop());\n    }\n\n    initManual() {\n        this.scale = d3.scaleLinear()\n            .domain([0, 100])\n            .range([0, 1000]);\n\n        let drag = d3.drag()\n            .on('drag', e => this.handleDrag(e));\n\n        let brush = d3.brush()\n            .on('brush', e => this.handleBrush(e));\n\n        const tooltip = d3.select(\"body\")\n            .append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"background-color\", \"lightgray\")\n            .style(\"padding\", \"2px\")\n            .style(\"position\", \"absolute\")\n            .style(\"opacity\", 0)\n            .style(\"display\", \"none\");\n\n        let size = 10000;\n        const resolution = 10;\n        let svg = d3.select(this.myRef.current)\n            .selectAll('svg')\n            .data([1])\n            .join('svg')\n            .attr('width', size)\n            .attr('height', size)\n            .style('display', 'block')\n            .style('margin', 'auto');\n\n        svg.call(brush);\n\n        svg.append('g').attr('class', 'hole');\n        svg.append('g').attr('class', 'horizontal');\n        svg.append('g').attr('class', 'vertical');\n        const figure = svg.append('g').attr('class', 'figure');\n        figure.append('g').attr('class', 'phantomedges');\n        figure.append('g').attr('class', 'phantomcircles');\n        figure.append('g').attr('class', 'phantomcircles2');\n        figure.append('g').attr('class', 'edges');\n        figure.append('g').attr('class', 'vertices');\n\n        this.lineClosed = d3.line()\n            .x(d => this.scale(d[0]))\n            .y(d => this.scale(d[1]))\n            .curve(d3.curveLinearClosed);\n\n        svg.select('g.hole')\n            .selectAll('path')\n            .data(this.currentState.hole)\n            .join('path')\n            .attr(\"d\", this.lineClosed(this.currentState.hole))\n            .attr('fill', 'lightblue');\n\n        svg.select('g.horizontal')\n            .selectAll('line')\n            .data(d3.range(1, size * resolution))\n            .join('line')\n            .attr('x1', 0)\n            .attr('y1', function(d) { return d * resolution; })\n            .attr('x2', size)\n            .attr('y2', function(d) { return d * resolution; })\n            .attr('stroke-width', '1px')\n            .attr('stroke', 'blue');\n\n        svg.select('g.vertical')\n            .selectAll('line')\n            .data(d3.range(1, size * resolution))\n            .join('line')\n            .attr('x1', function(d) { return d * resolution; })\n            .attr('y1', 0)\n            .attr('x2', function(d) { return d * resolution; })\n            .attr('y2', size)\n            .attr('stroke-width', '1px')\n            .attr('stroke', 'blue');\n\n        svg.select('g.figure g.edges')\n            .selectAll('line')\n            .data(this.currentState.figure.edges)\n            .join('line')\n            .attr(\"x1\", edge => this.scale(this.currentState.figure.vertices[edge[0]][0]))\n            .attr(\"y1\", edge => this.scale(this.currentState.figure.vertices[edge[0]][1]))\n            .attr(\"x2\", edge => this.scale(this.currentState.figure.vertices[edge[1]][0]))\n            .attr(\"y2\", edge => this.scale(this.currentState.figure.vertices[edge[1]][1]))\n            .attr(\"stroke\", edge => {\n                let edgeComparison = compareEdges(\n                    [this.state.currentProblem.figure.vertices[edge[0]], this.state.currentProblem.figure.vertices[edge[1]]],\n                    [this.currentState.figure.vertices[edge[0]], this.currentState.figure.vertices[edge[1]]],\n                    this.state.currentProblem.epsilon);\n                return edgeComparison < 0 ? 'red' : edgeComparison > 0 ? 'yellow' : 'black';\n            })\n            .attr('stroke-width', '2px')\n            .on(\"mouseover\", (e, d) => {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", 1)\n                    .style(\"display\", \"block\");\n\n                let vertexStart = this.currentState.figure.vertices[d[0]];\n                let vertexEnd = this.currentState.figure.vertices[d[1]];\n                let vertexOriginalStart = this.state.currentProblem.figure.vertices[d[0]];\n                let vertexOriginalEnd = this.state.currentProblem.figure.vertices[d[1]];\n                const possibleCombinationsForSquaredDistanceWithEpsilon = getPossibleCombinationsForSquaredDistanceWithEpsilon(squaredDistance(vertexOriginalStart, vertexOriginalEnd), this.currentState.epsilon);\n                tooltip.html('from ' + vertexStart + ' to ' + vertexEnd\n                        + ' <br> ◿ ' + getPositiveVectorBetweenPoints(vertexStart, vertexEnd)\n                        + ' <br> Exakte Kombis: ' + getPossibleCombinationsForSquaredDistance(squaredDistance(vertexOriginalStart, vertexOriginalEnd)).join(' ')\n                        + ' <br> Kombis mit Epsilon: ' + possibleCombinationsForSquaredDistanceWithEpsilon.join(' '))\n                    .style(\"left\", (e.x + 20) + \"px\")\n                    .style(\"top\", (e.y + 20) + \"px\");\n                //console.log(possibleCombinationsForSquaredDistanceWithEpsilon);\n\n                /*\n                svg.select('g.figure g.phantomedges')\n                    .selectAll('line')\n                    .data(possibleCombinationsForSquaredDistanceWithEpsilon)\n                    .join('line')\n                    .attr(\"x1\", edge => this.scale(vertexStart[0]))\n                    .attr(\"y1\", edge => this.scale(vertexStart[1]))\n                    .attr(\"x2\", edge => this.scale(edge[0] + vertexStart[0]))\n                    .attr(\"y2\", edge => this.scale(edge[1] + vertexStart[1]))\n                    .attr(\"stroke\", 'green')\n                    .attr('stroke-width', '2px');\n*/\n                svg.select('g.figure g.phantomcircles')\n                    .selectAll('circle')\n                    .data(possibleCombinationsForSquaredDistanceWithEpsilon)\n                    .join('circle')\n                    .attr('cx', edge => this.scale(edge[0] + vertexStart[0]))\n                    .attr('cy', edge => this.scale(edge[1] + vertexStart[1]))\n                    .attr('r', 6)\n                    .attr('fill', 'green')\n                    .attr('opacity', 0.5);\n                svg.select('g.figure g.phantomcircles2')\n                    .selectAll('circle')\n                    .data(possibleCombinationsForSquaredDistanceWithEpsilon)\n                    .join('circle')\n                    .attr('cx', edge => this.scale(edge[0] + vertexEnd[0]))\n                    .attr('cy', edge => this.scale(edge[1] + vertexEnd[1]))\n                    .attr('r', 6)\n                    .attr('fill', 'yellow')\n                    .attr('opacity', 0.5);\n            })\n            .on(\"mouseout\", function(d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                    .style(\"display\", \"none\");\n                svg.select('g.figure g.phantomedges')\n                    .selectAll('line')\n                    .data([])\n                    .join('line');\n                svg.select('g.figure g.phantomcircles')\n                    .selectAll('circle')\n                    .data([])\n                    .join('circle');\n                svg.select('g.figure g.phantomcircles2')\n                    .selectAll('circle')\n                    .data([])\n                    .join('circle');\n            });\n\n        svg.select('g.figure g.vertices')\n            .selectAll('circle')\n            .data(this.currentState.figure.vertices)\n            .join('circle')\n            .attr('cx', d => this.scale(d[0]))\n            .attr('cy', d => this.scale(d[1]))\n            .attr('r', 6)\n            .attr('fill', v => isPointInBounds(v, this.currentState.hole) ? 'blue' : 'red')\n            .call(drag)\n            .on(\"mouseover\", (e, d) => {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", 1)\n                    .style(\"display\", \"block\");\n                tooltip.html(d[0] + \",\" + d[1])\n                    .style(\"left\", (e.x + 20) + \"px\")\n                    .style(\"top\", (e.y + 20) + \"px\");\n                //console.log(d);\n                const edges = findEdgesConnectedToVertex(d, this.currentState.figure.vertices, this.currentState.figure.edges);\n                //console.log(edges);\n                const color = d3.scaleOrdinal().domain([0, edges.length])\n                    .range(d3.schemeSet1);\n                const possibleCombinationsForSquaredDistanceWithEpsilonPerEdge = [];\n                for(let e = 0; e < edges.length; ++e) {\n                    let vertexStart = this.currentState.figure.vertices[edges[e][0]];\n                    let vertexEnd = this.currentState.figure.vertices[edges[e][1]];\n                    if(vertexStart[0] === d[0] && vertexStart[1] === d[1]){\n                        [vertexStart, vertexEnd] = [vertexEnd, vertexStart];\n                    }\n                    const possibleCombinationsForSquaredDistanceWithEpsilon =\n                        getPossibleCombinationsForSquaredDistanceWithEpsilon(squaredDistance(this.state.currentProblem.figure.vertices[edges[e][0]], this.state.currentProblem.figure.vertices[edges[e][1]]), this.currentState.epsilon);\n\n                    possibleCombinationsForSquaredDistanceWithEpsilonPerEdge.push(possibleCombinationsForSquaredDistanceWithEpsilon.map(combination => [combination[0] + vertexStart[0], combination[1] + vertexStart[1]]));\n                    svg.select('g.figure g.phantomcircles')\n                        .append('g')\n                        .selectAll('circle')\n                        .data(possibleCombinationsForSquaredDistanceWithEpsilon)\n                        .join('circle')\n                        .attr('cx', edge => this.scale(edge[0] + d[0]))\n                        .attr('cy', edge => this.scale(edge[1] + d[1]))\n                        .attr('r', 6)\n                        .attr('fill', color(e % edges.length))\n                        .attr('opacity', 0.5);\n                }\n                let intersection = possibleCombinationsForSquaredDistanceWithEpsilonPerEdge[0];\n                for (const combination of possibleCombinationsForSquaredDistanceWithEpsilonPerEdge) {\n                    //console.log(combination);\n                    intersection = intersection.filter(x => combination.some(c => c[0] === x[0] && c[1] === x[1]));\n                }\n\n                //console.log(intersection);\n                svg.select('g.figure g.phantomcircles')\n                    .append('g')\n                    .selectAll('circle')\n                    .data(intersection)\n                    .join('circle')\n                    .attr('cx', edge => this.scale(edge[0]))\n                    .attr('cy', edge => this.scale(edge[1]))\n                    .attr('r', 12)\n                    .attr('fill', 'brown')\n                    .attr('opacity', 0.8);\n\n            })\n            .on(\"mouseout\", function(d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                    .style(\"display\", \"none\");\n                svg.selectAll('g.figure g.phantomcircles g')\n                    .selectAll('circle')\n                    .data([])\n                    .join('circle');\n            });\n    }\n\n    update() {\n        let svg = d3.select(this.myRef.current).selectAll('svg');\n\n        svg.select('g.figure g.edges')\n            .selectAll('line')\n            .data(this.currentState.figure.edges)\n            .join('line')\n            .attr(\"x1\", edge => this.scale(this.currentState.figure.vertices[edge[0]][0]))\n            .attr(\"y1\", edge => this.scale(this.currentState.figure.vertices[edge[0]][1]))\n            .attr(\"x2\", edge => this.scale(this.currentState.figure.vertices[edge[1]][0]))\n            .attr(\"y2\", edge => this.scale(this.currentState.figure.vertices[edge[1]][1]))\n            .attr(\"stroke\", edge => {\n                let edgeComparison = compareEdges(\n                    [this.state.currentProblem.figure.vertices[edge[0]], this.state.currentProblem.figure.vertices[edge[1]]],\n                    [this.currentState.figure.vertices[edge[0]], this.currentState.figure.vertices[edge[1]]],\n                    this.state.currentProblem.epsilon);\n                return edgeComparison < 0 ? 'red' : edgeComparison > 0 ? 'yellow' : 'black';\n            });\n\n        svg.select('g.figure g.vertices')\n            .selectAll('circle')\n            .data(this.currentState.figure.vertices)\n            .join('circle')\n            .attr('cx', d => this.scale(d[0]))\n            .attr('cy', d => this.scale(d[1]))\n            .attr('fill', v => isPointInBounds(v, this.currentState.hole) ? 'blue' : 'red');\n    }\n\n    getPose() {\n        return {\n            vertices: this.currentState.figure.vertices\n        };\n    }\n\n    downloadTxtFile = () => {\n        const element = document.createElement(\"a\");\n        const file = new Blob([JSON.stringify(this.getPose())], {type: 'text/plain'});\n        element.href = URL.createObjectURL(file);\n        element.download = this.state.problemKey + \".solution.json\";\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    };\n\n    render() {\n        return (\n            <div style={{backgroundColor: \"lightblue\", margin: \"10px\"}}>\n                {/* <button onClick={this.exportSolution}>Import Problem JSON</button> */}\n                <br/>\n                <select value={this.state.problemKey} onChange={this.handleSelectProblem}>\n                    <option key=\"---\" value=\"\">---</option>\n                {\n                    Object.keys(this.problems).map(key => (<option key={key} value={key}>Problem {key}</option>))\n                }\n                </select>\n                <br/>\n                <textarea style={{width: \"100%\", margin: \"0\", padding: \"0\"}}\n                          value={JSON.stringify(this.state.currentProblem)}\n                          onChange={this.changeCurrentProblem}/>\n                <br/>\n                <textarea style={{width: \"100%\", margin: \"0\", padding: \"0\"}}\n                          value={this.state.importSolutionJSON}\n                          placeholder=\"Import Lösung\"\n                          onChange={this.changeImportSolution}/>\n                <div style={{backgroundColor: \"gray\"}} ref={this.myRef}>\n                </div>\n                <div style={{backgroundColor: \"gray\"}} ref={this.myRef2}>\n                </div>\n                <div style={{backgroundColor: \"gray\"}} ref={this.myRef3}>\n                </div>\n                <button onClick={this.exportSolution}>Export solution</button>\n                <button onClick={this.downloadTxtFile}>Download txt</button>\n                {/*<button onClick={this.uploadSolution}>!Upload Solution!</button><input value={this.state.bearerToken} onChange={this.handleChangeBearerToken}/>*/}\n                <br/>\n                <textarea style={{width: \"90%\", margin: \"0\", padding: \"0\"}} value={this.state.currentSolutionJSON}\n                          readOnly/>\n                <div>\n                    Level, die bestimmte Boni erzeugen(Source)\n                    <ul>\n                    {\n\n                        Object.entries(this.state.bonusLevelsByType['typeToLevelsSource']).map(([key, value]) => (\n                            <li>\n                                <span style={{color: this.bonusTypeToColor[key]}}>{key}</span>: {value.join(', ')}\n                            </li>\n                        ))\n\n                    }\n                    </ul>\n                </div>\n                <div>\n                    Level, die bestimmte Boni von anderen Leveln erhalten(Target)\n                    <ul>\n                    {\n\n                        Object.entries(this.state.bonusLevelsByType['typeToLevelsTarget']).map(([key, value]) => (\n                            <li>\n                                <span style={{color: this.bonusTypeToColor[key]}}>{key}</span>: {value.join(', ')}\n                            </li>\n                        ))\n\n                    }\n                    </ul>\n                </div>\n\n            </div>\n        )\n    };\n\n    changeCurrentProblem = e => {\n        this.setState((state, props) => ({\n            currentProblem: JSON.parse(e.target.value),\n            problemKey: '',\n        }));\n        setTimeout(() => this.init());\n    };\n\n    changeImportSolution = e => {\n        console.log(e.target.value);\n        console.log(JSON.parse(e.target.value));\n        this.setState((state, props) => ({\n            importSolutionJSON: e.target.value,\n        }));\n        setTimeout(() => {\n            console.log(this.state.importSolutionJSON.vertices);\n            console.log(JSON.parse(this.state.importSolutionJSON).vertices);\n            this.currentState.figure.vertices = JSON.parse(this.state.importSolutionJSON).vertices;\n            this.update();\n        });\n    };\n\n    handleSelectProblem = e => {\n        if (this.problems.hasOwnProperty(e.target.value)) {\n            this.setState((state, props) => ({\n                currentProblem: this.problems[e.target.value],\n                problemKey: e.target.value,\n            }));\n            setTimeout(() => this.init());\n        }\n    };\n\n    exportSolution = () => {\n        //\"[[6,6],[20,40],[30,95],[40,15],[40,35],[40,65],[40,95],[45,5],[45,25],[50,15],[50,70],[55,5],[55,25],[60,15],[60,35],[60,65],[60,95],[70,95],[80,30],[80,40]]\"\n        const integerPose = this.getPose();\n        console.log(integerPose);\n        this.setState((state, props) => ({\n            currentSolutionJSON: JSON.stringify(integerPose),\n        }));\n    };\n}\n\nexport default App;\n","import fs from 'fs';\r\n\r\n// Get filename only.\r\n// Example: './foo.json' becomes 'foo'\r\nfunction getFileNameOnly(filePath) {\r\n    return filePath.split('/').pop().split('.').shift();\r\n}\r\n\r\n// ALL THE JSON!\r\nfunction loadProblems() {\r\n    const requireContext = require.context('./problems', false, /\\.json$/);\r\n    const json = {};\r\n    requireContext.keys().forEach((key) => {\r\n        const obj = requireContext(key);\r\n        const simpleKey = getFileNameOnly(key);\r\n        json[simpleKey] = obj;\r\n    });\r\n    return json;\r\n\r\n    /*\r\n        const folder = './src/problems';\r\n        const json = {};\r\n        fs.readdirSync(folder).forEach(file => {\r\n            console.log(file);\r\n            //const obj = await import(file);\r\n            console.log('asdf');\r\n            console.log(obj);\r\n            const simpleKey = getFileNameOnly(file);\r\n            json[simpleKey] = obj;\r\n        });\r\n        console.log(json);\r\n        return json;\r\n*/\r\n}\r\n\r\nexport {loadProblems}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}